name: Deploy EMS to production

on:
  push:
    branches:
      - development

jobs:
  deploy:
    name: Build and Deploy to VPS
    runs-on: ubuntu-latest  
    environment: CICD

    env:
      VPS_DEPLOY_PATH: '/www/wwwroot/ems-production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '20.10.0'
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Cache Next.js build cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/apps/web/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

    - name: Install dependencies
      run: pnpm install

    - name: Build the project
      run: pnpm build

    - name: Archive build artifacts
      run: |
        tar -czf build.tar.gz dist/apps/web

    - name: Upload build artifact to VPS
      run: |
        scp -o StrictHostKeyChecking=no build.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ env.VPS_DEPLOY_PATH }}

    - name: SSH into VPS and deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'

        # Ensure the deployment directory exists
        sudo mkdir -p ${VPS_DEPLOY_PATH}

        # Navigate to the project directory
        cd $VPS_PROJECT_PATH

        # Delete all files and directories except node_modules
        sudo find . -mindepth 1 -maxdepth 1 ! -name node_modules -exec rm -rf {} +

        # Extract the new build
        sudo tar -xzf ${VPS_DEPLOY_PATH}/build.tar.gz -C .

        # Remove the tar file after extraction
        sudo rm ${VPS_DEPLOY_PATH}/build.tar.gz

        EOF
